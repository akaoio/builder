"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// wrapper.ts
var wrapper_exports = {};
__export(wrapper_exports, {
  Operation: () => import_index2.Operation,
  Pty: () => Pty,
  getCloseOnExec: () => getCloseOnExec,
  setCloseOnExec: () => setCloseOnExec
});
module.exports = __toCommonJS(wrapper_exports);
var import_node_tty = require("tty");
var import_index = require("./index.js");
var import_index2 = require("./index.js");
var Pty = class {
  #pty;
  #fd;
  #handledClose = false;
  #fdClosed = false;
  #socket;
  get read() {
    return this.#socket;
  }
  get write() {
    return this.#socket;
  }
  constructor(options) {
    const realExit = options.onExit;
    let markExited;
    let exitResult = new Promise((resolve) => {
      markExited = resolve;
    });
    let markReadFinished;
    let readFinished = new Promise((resolve) => {
      markReadFinished = resolve;
    });
    const mockedExit = (error, code) => {
      markExited({ error, code });
    };
    this.#pty = new import_index.Pty({ ...options, onExit: mockedExit });
    this.#fd = this.#pty.takeFd();
    this.#socket = new import_node_tty.ReadStream(this.#fd);
    const handleClose = async () => {
      if (this.#fdClosed) {
        return;
      }
      this.#fdClosed = true;
      await readFinished;
      const result = await exitResult;
      realExit(result.error, result.code);
    };
    this.read.once("end", markReadFinished);
    this.read.once("close", handleClose);
    const handleError = (err) => {
      if (err.code) {
        const code = err.code;
        if (code === "EINTR" || code === "EAGAIN") {
          return;
        } else if (code.indexOf("EIO") !== -1) {
          this.read.off("error", handleError);
          this.read.emit("end");
          return;
        }
      }
      throw err;
    };
    this.read.on("error", handleError);
  }
  close() {
    this.#handledClose = true;
    this.#socket.end();
  }
  resize(size) {
    if (this.#handledClose || this.#fdClosed) {
      return;
    }
    if (size.cols < import_index.MIN_U16_VALUE || size.cols > import_index.MAX_U16_VALUE || size.rows < import_index.MIN_U16_VALUE || size.rows > import_index.MAX_U16_VALUE) {
      throw new RangeError(
        `Size (${size.rows}x${size.cols}) out of range: must be between ${import_index.MIN_U16_VALUE} and ${import_index.MAX_U16_VALUE}`
      );
    }
    try {
      (0, import_index.ptyResize)(this.#fd, size);
    } catch (e) {
      if (e instanceof Error && (e.message.indexOf("os error 9") !== -1 || // EBADF
      e.message.indexOf("os error 25") !== -1)) {
        return;
      }
      throw e;
    }
  }
  get pid() {
    return this.#pty.pid;
  }
};
var setCloseOnExec = import_index.setCloseOnExec;
var getCloseOnExec = import_index.getCloseOnExec;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Operation,
  Pty,
  getCloseOnExec,
  setCloseOnExec
});
//# sourceMappingURL=wrapper.js.map