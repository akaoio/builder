import { Readable, Writable } from 'node:stream';
import { PtyOptions, Size, setCloseOnExec as setCloseOnExec$1, getCloseOnExec as getCloseOnExec$1 } from './index.js';
export { Operation, PtyOptions, SandboxOptions, SandboxRule } from './index.js';

/**
 * A very thin wrapper around PTYs and processes.
 *
 * @example
 * const { Pty } = require('@replit/ruspty');
 *
 * const pty = new Pty({
 *   command: '/bin/sh',
 *   args: [],
 *   envs: ENV,
 *   dir: CWD,
 *   size: { rows: 24, cols: 80 },
 *   onExit: (...result) => {
 *     // TODO: Handle process exit.
 *   },
 * });
 *
 * const read = pty.read;
 * const write = pty.write;
 *
 * read.on('data', (chunk) => {
 *   // TODO: Handle data.
 * });
 * write.write('echo hello\n');
 */
declare class Pty {
    #private;
    get read(): Readable;
    get write(): Writable;
    constructor(options: PtyOptions);
    close(): void;
    resize(size: Size): void;
    get pid(): number;
}
/**
 * Set the close-on-exec flag on a file descriptor. This is `fcntl(fd, F_SETFD, FD_CLOEXEC)` under
 * the covers.
 */
declare const setCloseOnExec: typeof setCloseOnExec$1;
/**
 * Get the close-on-exec flag on a file descriptor. This is `fcntl(fd, F_GETFD) & FD_CLOEXEC ==
 * FD_CLOEXEC` under the covers.
 */
declare const getCloseOnExec: typeof getCloseOnExec$1;

export { Pty, getCloseOnExec, setCloseOnExec };
