import {
  __require
} from "./chunk-3RG5ZIWI.js";

// src/PTY/NodePTY.ts
import { createRequire } from "module";
var NodePTY = class {
  pty;
  _killed = false;
  constructor(command, args, options) {
    let nodePty;
    if (typeof __require !== "undefined") {
      try {
        nodePty = __require("node-pty");
      } catch (err) {
        throw new Error("node-pty is not installed. Run: npm install node-pty");
      }
    } else if (typeof import.meta !== "undefined" && import.meta.url) {
      const requireFunc = createRequire(import.meta.url);
      try {
        nodePty = requireFunc("node-pty");
      } catch (err) {
        throw new Error("node-pty is not installed. Run: npm install node-pty");
      }
    } else {
      throw new Error("Unable to load node-pty in this environment");
    }
    this.pty = nodePty.spawn(command, args, {
      name: options.name || "xterm-256color",
      cols: options.cols || 80,
      rows: options.rows || 24,
      cwd: options.cwd || process.cwd(),
      env: { ...process.env, ...options.env, TERM: "xterm-256color" }
    });
  }
  onData(callback) {
    this.pty.onData(callback);
  }
  onExit(callback) {
    this.pty.onExit(({ exitCode }) => {
      this._killed = true;
      callback(exitCode);
    });
  }
  write(data) {
    if (!this._killed) {
      this.pty.write(data);
    }
  }
  resize(cols, rows) {
    if (!this._killed) {
      this.pty.resize(cols, rows);
    }
  }
  kill(signal) {
    if (!this._killed) {
      this.pty.kill(signal);
      this._killed = true;
    }
  }
  get pid() {
    return this.pty.pid;
  }
  get killed() {
    return this._killed;
  }
};
var NodePTY_default = NodePTY;
export {
  NodePTY,
  NodePTY_default as default
};
